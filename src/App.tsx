/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 * 
 * Generated with the TypeScript template
 * https://github.com/emin93/react-native-template-typescript
 */

import React, { Component } from 'react';
import { compose, createStore } from "redux";
import { Provider } from "react-redux";
import {
  StackNavigator,
} from 'react-navigation';
import {
  Platform,
  StyleSheet,
  Text,
  View
} from 'react-native';
import firebase from 'react-native-firebase';
import PushNotification from 'react-native-push-notification';

import Home from "./containers/Home";
import LandingPage from "./containers/LnadingPage";
import Question from "./containers/Question";
import AddQuestion from "./containers/AddQuestion";
import rootReducer from "./redux";
import RootComponent from "./RootComponent";

const store = compose()(createStore)(rootReducer);

const instructions = Platform.select({
  ios: 'Press Cmd+R to reload,\n' +
  'Cmd+D or shake for dev menu',
  android: 'Double tap R on your keyboard to reload,\n' +
  'Shake or press menu button for dev menu',
});

PushNotification.configure({

  onRegister: function (token: any) {
    //process token
  },

  onNotification: function (notification: any) {
    // process the notification
    // required on iOS only
  },

  popInitialNotification: true,
  requestPermissions: true,

});

interface State {
  user: any;
}
interface Props { }
export default class App extends Component<Props, State> {

  constructor(props: Props) {
    super(props);
    this.state = {
      user: ""
    };
    firebase.messaging().
      subscribeToTopic("Sharepoint");
  }

  componentDidMount() {
    debugger;
    firebase.notifications().onNotification((notification: any) => {
      debugger;
      PushNotification.localNotification({
        /* Android Only Properties */
        id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "My Notification Ticker", // (optional)
        autoCancel: true, // (optional) default: true
        largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
        // subText: "This is a subText", // (optional) default: none
        color: "red", // (optional) default: system default
        vibrate: true, // (optional) default: true
        vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        // tag: 'some_tag', // (optional) add tag to message
        // group: "group", // (optional) add group to message
        // ongoing: false, // (optional) set whether this is an "ongoing" notification


        /* iOS and Android properties */
        title: notification._title, // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
        message: JSON.parse(notification._body).Title, // (required)
        playSound: true, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        // number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        // repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
        // actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
      });
    });
  }

  render() {
    return (
      <Provider store={store}>
        <AppNavigator />
      </Provider>
    );
  }
}

const routesConfig = {
  Login: {
    screen: RootComponent,
    navigationOptions: {
      header: null,
    }
  },
  Home: { screen: Home },
  Question: { screen: Question },
  NewQuestion: { screen: AddQuestion }
};


export const AppNavigator = StackNavigator(routesConfig, { initialRouteName: 'Login' });

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
});
